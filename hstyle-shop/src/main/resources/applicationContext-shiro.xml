<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
	
	<description>apache shiro 配置</description>
	
	<!-- 采用容器session来管理本地sessionid对象 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.ServletContainerSessionManager">
        
    </bean>
    <!-- 采用容器本地sessiondao来管理本地sessionid对象 -->
    <!--bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO">
	        <bean class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		        <property name="activeSessionsCacheName" value="shiroActiveSessionCache" />
		    </bean>
        </property>     
   </bean-->

    <!-- 自定义shiro的realm数据库授权 -->
    <bean id="authorizationRealm" class="com.hstyle.admin.web.security.UserSecurityRealm">
        <property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5" />
			</bean>
		</property>		
   		<property name="defaultPermissions" value="security:change-password,security:index,security:main" />
    	<property name="authorizationCacheName" value="shiroAuthorizationCache" />   	
    </bean>
    
	
	<!-- shiro 的缓存管理,使用spring的ehCacheManagerFactory,
		  操作spring缓存工厂来及时更新shiro的缓存管理
		 ehCacheManagerFactory对象在applicationContext-core.xml中配置 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
        <property name="cacheManager" ref="ehCacheManagerFactory" />
    </bean>
    
    <!-- 使用默认的WebSecurityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- realm认证和授权,从数据库读取资源 -->
		<property name="realms">
			<list>				
				<ref bean="authorizationRealm"/>
			</list>
		</property>
		<!-- sessionManager,使用缓存sessionDao -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- cacheManager,集合spring缓存工厂 -->
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	
	<!-- 自定义对 shiro的连接约束,结合shiroSecurityFilter实现动态获取资源 -->
	<bean id="chainDefinitionSectionMetaSource" class="com.hstyle.admin.web.security.ChainDefinitionSectionMetaSource">
		<!-- 默认的连接配置 -->
		<property name="filterChainDefinitions">
			<value>
				/login.do =authc
				/index.jsp=anon
				/app/** = anon
				/extjs/** = anon				
				/main.do=authc,perms[security:main]				
				/changePassword = perms[security:change-password]
			</value>
		</property>
	</bean>
    
	<!-- 将shiro与spring集合 -->
	<bean id="shiroSecurityFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- shiro的核心安全接口 -->
    	<property name="securityManager" ref="securityManager" />
    	<!-- 要求登录时的链接 该连接-->
	    <property name="loginUrl" value="/login.do" />
	    <!-- 登陆成功后要跳转的连接， -->
	    <property name="successUrl" value="/login.do" />
	    <property name="unauthorizedUrl" value="/unauthorized.do"/>
	    <!-- <property name="filters"> 
          <map> 
            <entry key="captchauthc" value-ref="captchaFormAuthenticationFilter"/> 
         </map> 
        </property> --> 
	    <!-- shiro连接约束配置,在这里使用自定义的动态获取资源类 -->
	    <property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" />
	</bean>
	
	<!-- shiro为Spring BeanPostProcessor处理器调用init()方法 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- spring aop 代理创建器 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		
    </bean>
    
    <!-- 启用shrio授权注解拦截方式 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager" />
	</bean>
	<!-- 验证码登录验证扩展 -->
	<!-- <bean id="captchaFormAuthenticationFilter" 
        class="com.hstyle.admin.web.security.JcaptchaFormAuthenticationFilter"/> -->
	
</beans>